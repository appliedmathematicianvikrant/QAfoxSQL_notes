                                                             preface:
Proficiency comes through repeated use and practice. In your job, it is likely that you 
will use some SQL functionalities heavily and others not as much. That is OK. It is 
more important to become proficient in what your job requires, and consult this 
book (or Google) as a reference when you need answers about an unfamiliar topic.

mailto:tmnield@outlook.com   we can contact the author on this email id for any doubt or career information 

                                                          chapter 1  Why learn SQL?
this skill is for everybody from IT professional to research scholar.

                                                             chapter 2 Database
A database is anything that collects and organizes data.
proffessionally database refers to RDBMS.

why we organize the data into seperate tables rather than in single table?
The motivation is normalization, which is separating the different types of data into their own tables rather than putting them in one table.

Lightweight databases:  Used for small systems and data
examples:  SQLite, Microsoft Access.  used in smartphones, satellites, aircraft, and car systems

CentralizedDatabase: for thousand of data
example: MySQL, Microsoft SQL Server, Oracle, PostgreSQL, Teradata, IBM DB2,  MariaDB

You can install some of these solutions on any computer and turn that computer into 
a server.

If you ever do need to create a centralized database solution, I would highly recom‐ 
mend MySQL. It is open source, free to use, and straightforward to install and set up. 
It is used by Facebook, Google, eBay, Twitter, and hundreds of other Silicon Valley 
companies.

Although we will use SQLite in this book, keep in mind it uses SQL, so the knowledge 
you gain is applicable to all database platforms.


                                                              chapter 3   SQLite
download and install the setup 


                                                              chapter 4  SELECT

To select all details from some given table we write
SELECT *
FROM table_name;

If we wanat to pull down only selected column_name we can also do it like this
SELECT column1, column2,...
FROM table_name;

NOTE:  A single SQL statement can optionally end with a semicolon (;)
. However, the semicolon is necessary to run multiple SQL statements at once, which is helpful when writing data

Suppose we wanted to generate a calculated column called TAXED_PRICE that is 7% 
higher than PRICE. We could use a SELECT query to dynamically calculate this for us 
SELECT 
PRODUCT_ID, 
DESCRIPTION, 
PRICE,
PRICE * 1.07 AS TAXED_PRICE      this AS statemnt is called as alias
FROM PRODUCT;

NOTE: software ignores extra white sapces

We can use aliases to give names to expressions. We can also use aliases to apply a 
new name to an existing column within the query.
Using alias  does not actually change the 
name of the column in the table, but it gives it a new name within the scope of our 
SELECT statement.

NOTE: When giving names to anything in SQL (whether it is an alias, a 
column name, a table name, or any other entity), always use an 
underscore (_) as a placeholder for spaces. You will run into errors 
otherwise.

In order to round our result we can use ROUND() in built function.
SELECT 
PRODUCT_ID, 
DESCRIPTION, 
PRICE,
round(PRICE * 1.07, 2) AS TAXED_PRICE 
FROM PRODUCT;

Mathematical opeartors 
+     Adds two numbers                       STOCK + NEW_SHIPMENT
-     Subtracts two numbers                  STOCK - DEFECTS
*     Multiplies two numbers                PRICE * 1.07
/     Divides two numbers                   STOCK / PALLET_SIZE
%     Divides two numbers, 
       but returns the remainder             STOCK % PALLET_SIZE


Concentation
SELECT NAME,
CITY || ', ' || STATE AS LOCATION          in between we have added a comma
FROM CUSTOMER;


We can even concatenate several fields into a single SHIP_ADDRESS value 

SELECT NAME,
STREET_ADDRESS || ' ' || CITY || ', ' || STATE || ' ' || ZIP AS SHIP_ADDRESS       here somewhere we have added space
FROM CUSTOMER;

NOTE:  Many database platforms use double pipes (||) to concatenate, but 
MySQL and some others require using a CONCAT() function.

                                           Chapter 5
  NOTE:Table names and columns can be defined in uppercase or lowercase. SQL commands such as SELECT, FROM, and WHERE can be uppercase or lowercase as well.                                         
 SELECT * FROM station_data 
 WHERE year = 2010;
 
 Conversely, you can use != or <> to get everything but 2010. For example:
 SELECT * FROM station_data 
WHERE year != 2010
Or:
SELECT * FROM station_data 
WHERE year <> 2010

We can also qualify inclusive ranges using a BETWEEN statement, as shown here 
(“inclusive” means that 2005 and 2010 are included in the range):
SELECT * FROM station_data 
WHERE year BETWEEN 2005 and 2010

the year must be greater 
than or equal to 2005 and less than or equal to 2010:
SELECT * FROM station_data
WHERE year >= 2005 AND year <= 2010


SELECT * FROM station_data 
WHERE MONTH = 3
OR MONTH = 6 
OR MONTH = 9 
OR MONTH = 12

elternatively we can use IN
SELECT * FROM station_data 
WHERE MONTH IN (3,6,9,12)

If we wanted everything except 3, 6, 9, and 12, we could use NOT IN:
SELECT * FROM station_data 
WHERE MONTH NOT IN (3,6,9,12)


NOTE: Oracle does not support the modulus operator. It instead uses the MOD() function.

if you wanted to filter for a specific report_code, you could run this query
SELECT * FROM station_data 
WHERE report_code = '513A63'

This single-quote rule applies to all text operations, including this IN operation:
SELECT * FROM station_data
WHERE report_code IN ('513A63','1F8A7B','EF616A')

using length function
SELECT * FROM station_data 
WHERE length(report_code) != 6 ;


if you wanted to find all report codes that start with the letter “A,” we would run this statement to find “A” followed by any characters:
SELECT * FROM station_data 
WHERE report_code LIKE 'A%';

If you wanted to find all report codes that have a “B” as the first character and a “C” as the third character, you would specify an underscore (_) for the second position, 
and follow with any number of characters after the “C”:
SELECT * FROM station_data 
WHERE report_code LIKE 'B_C%';

This boolean true and false takes different values in different SQL servers some takaes 1 and 0
SELECT * FROM station_data
WHERE tornado = true AND hail = true;


Null values cannot be determined with an =. You need to use the IS NULL or IS NOT 
NULL statements to identify null values. So, to get all records with no recorded 
snow_depth, you could run this query:
SELECT * FROM station_data 
WHERE snow_depth IS NULL;

NOTE: Do not confuse nulls with empty text, which is two single quotes 
with nothing in them (i.e., ''). This also applies to whitespace text 
(i.e., ' '). These will be treated as values and never will be consid‐ 
ered null. A null is definitely not the same as 0 either, because 0 is a 
value, whereas null is an absence of a value.

we can use brackets in order to define the order of operation.

                             
                                  Chapter 6   GROUP BY and ORDER BY
                                  
                                  



