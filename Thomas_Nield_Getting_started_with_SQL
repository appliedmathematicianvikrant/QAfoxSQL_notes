preface:
Proficiency comes through repeated use and practice. In your job, it is likely that you 
will use some SQL functionalities heavily and others not as much. That is OK. It is 
more important to become proficient in what your job requires, and consult this 
book (or Google) as a reference when you need answers about an unfamiliar topic.

mailto:tmnield@outlook.com   we can contact the author on this email id for any doubt or career information 

chapter 1  Why learn SQL?
this skill is for everybody from IT professional to research scholar.

chapter 2 Database
A database is anything that collects and organizes data.
proffessionally database refers to RDBMS.

why we organize the data into seperate tables rather than in single table?
The motivation is normalization, which is separating the different types of data into their own tables rather than putting them in one table.

Lightweight databases:  Used for small systems and data
examples:  SQLite, Microsoft Access.  used in smartphones, satellites, aircraft, and car systems

CentralizedDatabase: for thousand of data
example: MySQL, Microsoft SQL Server, Oracle, PostgreSQL, Teradata, IBM DB2,  MariaDB

You can install some of these solutions on any computer and turn that computer into 
a server.

If you ever do need to create a centralized database solution, I would highly recom‚Äê 
mend MySQL. It is open source, free to use, and straightforward to install and set up. 
It is used by Facebook, Google, eBay, Twitter, and hundreds of other Silicon Valley 
companies.

Although we will use SQLite in this book, keep in mind it uses SQL, so the knowledge 
you gain is applicable to all database platforms.


chapter 3   SQLite
download and install the setup 


chapter 4  SELECT

To select all details from some given table we write
SELECT *
FROM table_name;

If we wanat to pull down only selected column_name we can also do it like this
SELECT column1, column2,...
FROM table_name;

NOTE:  A single SQL statement can optionally end with a semicolon (;)
. However, the semicolon is necessary to run multiple SQL statements at once, which is helpful when writing data

Suppose we wanted to generate a calculated column called TAXED_PRICE that is 7% 
higher than PRICE. We could use a SELECT query to dynamically calculate this for us 
SELECT 
PRODUCT_ID, 
DESCRIPTION, 
PRICE,
PRICE * 1.07 AS TAXED_PRICE      this AS statemnt is called as alias
FROM PRODUCT;

NOTE: software ignores extra white sapces

We can use aliases to give names to expressions. We can also use aliases to apply a 
new name to an existing column within the query.
Using alias  does not actually change the 
name of the column in the table, but it gives it a new name within the scope of our 
SELECT statement.

NOTE: When giving names to anything in SQL (whether it is an alias, a 
column name, a table name, or any other entity), always use an 
underscore (_) as a placeholder for spaces. You will run into errors 
otherwise.

In order to round our result we can use ROUND() in built function.
SELECT 
PRODUCT_ID, 
DESCRIPTION, 
PRICE,
round(PRICE * 1.07, 2) AS TAXED_PRICE 
FROM PRODUCT;

Mathematical opeartors 
+     Adds two numbers                       STOCK + NEW_SHIPMENT
-     Subtracts two numbers                  STOCK - DEFECTS
*     Multiplies two numbers                PRICE * 1.07
/     Divides two numbers                   STOCK / PALLET_SIZE
%     Divides two numbers, 
       but returns the remainder             STOCK % PALLET_SIZE


Concentation
SELECT NAME,
CITY || ', ' || STATE AS LOCATION          in between we have added a comma
FROM CUSTOMER;


We can even concatenate several fields into a single SHIP_ADDRESS value 

SELECT NAME,
STREET_ADDRESS || ' ' || CITY || ', ' || STATE || ' ' || ZIP AS SHIP_ADDRESS       here somewhere we have added space
FROM CUSTOMER;

NOTE:  Many database platforms use double pipes (||) to concatenate, but 
MySQL and some others require using a CONCAT() function.










